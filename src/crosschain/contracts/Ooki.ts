/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export declare namespace IToken {
    export type LoanOpenDataStruct = {
        loanId: BytesLike
        principal: BigNumberish
        collateral: BigNumberish
    }

    export type LoanOpenDataStructOutput = [string, BigNumber, BigNumber] & {
        loanId: string
        principal: BigNumber
        collateral: BigNumber
    }
}

export interface OokiInterface extends utils.Interface {
    contractName: 'Ooki'
    functions: {
        'DOMAIN_SEPARATOR()': FunctionFragment
        'PERMIT_TYPEHASH()': FunctionFragment
        '_isPaused(bytes4)': FunctionFragment
        'allowance(address,address)': FunctionFragment
        'approve(address,uint256)': FunctionFragment
        'assetBalanceOf(address)': FunctionFragment
        'balanceOf(address)': FunctionFragment
        'borrow(bytes32,uint256,uint256,uint256,address,address,address,bytes)': FunctionFragment
        'borrowInterestRate()': FunctionFragment
        'burn(address,uint256)': FunctionFragment
        'burnToEther(address,uint256)': FunctionFragment
        'changeGuardian(address)': FunctionFragment
        'checkpointPrice(address)': FunctionFragment
        'flashBorrow(uint256,address,address,string,bytes)': FunctionFragment
        'getBorrowAmountForDeposit(uint256,uint256,address)': FunctionFragment
        'getDepositAmountForBorrow(uint256,uint256,address)': FunctionFragment
        'getGuardian()': FunctionFragment
        'getPoolUtilization()': FunctionFragment
        'initialPrice()': FunctionFragment
        'initializeDomainSeparator()': FunctionFragment
        'loanParamsIds(uint256)': FunctionFragment
        'loanTokenAddress()': FunctionFragment
        'marginTrade(bytes32,uint256,uint256,uint256,address,address,bytes)': FunctionFragment
        'mint(address,uint256)': FunctionFragment
        'mintWithEther(address)': FunctionFragment
        'name()': FunctionFragment
        'nextBorrowInterestRate(uint256)': FunctionFragment
        'nextSupplyInterestRate(int256)': FunctionFragment
        'nonces(address)': FunctionFragment
        'owner()': FunctionFragment
        'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment
        'profitOf(address)': FunctionFragment
        'revokeApproval(address)': FunctionFragment
        'setDemandCurve(address)': FunctionFragment
        'setTarget(address)': FunctionFragment
        'supplyInterestRate()': FunctionFragment
        'symbol()': FunctionFragment
        'toggleFunctionPause(bytes4)': FunctionFragment
        'toggleFunctionUnPause(bytes4)': FunctionFragment
        'tokenPrice()': FunctionFragment
        'totalAssetBorrow()': FunctionFragment
        'totalAssetSupply()': FunctionFragment
        'totalSupply()': FunctionFragment
        'totalSupplyInterestRate(uint256)': FunctionFragment
        'transfer(address,uint256)': FunctionFragment
        'transferFrom(address,address,uint256)': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'updateFlashBorrowFeePercent(uint256)': FunctionFragment
        'updateSettings(address,bytes)': FunctionFragment
    }

    encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string
    encodeFunctionData(functionFragment: 'PERMIT_TYPEHASH', values?: undefined): string
    encodeFunctionData(functionFragment: '_isPaused', values: [BytesLike]): string
    encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string
    encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'assetBalanceOf', values: [string]): string
    encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
    encodeFunctionData(
        functionFragment: 'borrow',
        values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, string, string, string, BytesLike]
    ): string
    encodeFunctionData(functionFragment: 'borrowInterestRate', values?: undefined): string
    encodeFunctionData(functionFragment: 'burn', values: [string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'burnToEther', values: [string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'changeGuardian', values: [string]): string
    encodeFunctionData(functionFragment: 'checkpointPrice', values: [string]): string
    encodeFunctionData(
        functionFragment: 'flashBorrow',
        values: [BigNumberish, string, string, string, BytesLike]
    ): string
    encodeFunctionData(
        functionFragment: 'getBorrowAmountForDeposit',
        values: [BigNumberish, BigNumberish, string]
    ): string
    encodeFunctionData(
        functionFragment: 'getDepositAmountForBorrow',
        values: [BigNumberish, BigNumberish, string]
    ): string
    encodeFunctionData(functionFragment: 'getGuardian', values?: undefined): string
    encodeFunctionData(functionFragment: 'getPoolUtilization', values?: undefined): string
    encodeFunctionData(functionFragment: 'initialPrice', values?: undefined): string
    encodeFunctionData(functionFragment: 'initializeDomainSeparator', values?: undefined): string
    encodeFunctionData(functionFragment: 'loanParamsIds', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'loanTokenAddress', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'marginTrade',
        values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, string, string, BytesLike]
    ): string
    encodeFunctionData(functionFragment: 'mint', values: [string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'mintWithEther', values: [string]): string
    encodeFunctionData(functionFragment: 'name', values?: undefined): string
    encodeFunctionData(functionFragment: 'nextBorrowInterestRate', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'nextSupplyInterestRate', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'nonces', values: [string]): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'permit',
        values: [string, string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
    ): string
    encodeFunctionData(functionFragment: 'profitOf', values: [string]): string
    encodeFunctionData(functionFragment: 'revokeApproval', values: [string]): string
    encodeFunctionData(functionFragment: 'setDemandCurve', values: [string]): string
    encodeFunctionData(functionFragment: 'setTarget', values: [string]): string
    encodeFunctionData(functionFragment: 'supplyInterestRate', values?: undefined): string
    encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
    encodeFunctionData(functionFragment: 'toggleFunctionPause', values: [BytesLike]): string
    encodeFunctionData(functionFragment: 'toggleFunctionUnPause', values: [BytesLike]): string
    encodeFunctionData(functionFragment: 'tokenPrice', values?: undefined): string
    encodeFunctionData(functionFragment: 'totalAssetBorrow', values?: undefined): string
    encodeFunctionData(functionFragment: 'totalAssetSupply', values?: undefined): string
    encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
    encodeFunctionData(functionFragment: 'totalSupplyInterestRate', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string
    encodeFunctionData(functionFragment: 'updateFlashBorrowFeePercent', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'updateSettings', values: [string, BytesLike]): string

    decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'PERMIT_TYPEHASH', data: BytesLike): Result
    decodeFunctionResult(functionFragment: '_isPaused', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'assetBalanceOf', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'borrowInterestRate', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'burnToEther', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'changeGuardian', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'checkpointPrice', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'flashBorrow', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getBorrowAmountForDeposit', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getDepositAmountForBorrow', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getGuardian', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getPoolUtilization', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'initialPrice', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'initializeDomainSeparator', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'loanParamsIds', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'loanTokenAddress', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'marginTrade', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'mintWithEther', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'nextBorrowInterestRate', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'nextSupplyInterestRate', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'profitOf', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'revokeApproval', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setDemandCurve', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setTarget', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'supplyInterestRate', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'toggleFunctionPause', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'toggleFunctionUnPause', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'tokenPrice', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'totalAssetBorrow', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'totalAssetSupply', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'totalSupplyInterestRate', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'updateFlashBorrowFeePercent', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'updateSettings', data: BytesLike): Result

    events: {
        'Approval(address,address,uint256)': EventFragment
        'Burn(address,uint256,uint256,uint256)': EventFragment
        'FlashBorrow(address,address,address,uint256)': EventFragment
        'Mint(address,uint256,uint256,uint256)': EventFragment
        'Transfer(address,address,uint256)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'FlashBorrow'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
}

export type ApprovalEvent = TypedEvent<
    [string, string, BigNumber],
    { owner: string; spender: string; value: BigNumber }
>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export type BurnEvent = TypedEvent<
    [string, BigNumber, BigNumber, BigNumber],
    {
        burner: string
        tokenAmount: BigNumber
        assetAmount: BigNumber
        price: BigNumber
    }
>

export type BurnEventFilter = TypedEventFilter<BurnEvent>

export type FlashBorrowEvent = TypedEvent<
    [string, string, string, BigNumber],
    { borrower: string; target: string; loanToken: string; loanAmount: BigNumber }
>

export type FlashBorrowEventFilter = TypedEventFilter<FlashBorrowEvent>

export type MintEvent = TypedEvent<
    [string, BigNumber, BigNumber, BigNumber],
    {
        minter: string
        tokenAmount: BigNumber
        assetAmount: BigNumber
        price: BigNumber
    }
>

export type MintEventFilter = TypedEventFilter<MintEvent>

export type TransferEvent = TypedEvent<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface Ooki extends BaseContract {
    contractName: 'Ooki'
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: OokiInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>

        PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>

        _isPaused(sig: BytesLike, overrides?: CallOverrides): Promise<[boolean] & { isPaused: boolean }>

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        assetBalanceOf(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>

        balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>

        borrow(
            loanId: BytesLike,
            withdrawAmount: BigNumberish,
            initialLoanDuration: BigNumberish,
            collateralTokenSent: BigNumberish,
            collateralTokenAddress: string,
            borrower: string,
            receiver: string,
            loanDataBytes: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        borrowInterestRate(overrides?: CallOverrides): Promise<[BigNumber]>

        burn(
            receiver: string,
            burnAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        burnToEther(
            receiver: string,
            burnAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        changeGuardian(
            newGuardian: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        checkpointPrice(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>

        flashBorrow(
            borrowAmount: BigNumberish,
            borrower: string,
            target: string,
            signature: string,
            data: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        getBorrowAmountForDeposit(
            depositAmount: BigNumberish,
            initialLoanDuration: BigNumberish,
            collateralTokenAddress: string,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { borrowAmount: BigNumber }>

        getDepositAmountForBorrow(
            borrowAmount: BigNumberish,
            initialLoanDuration: BigNumberish,
            collateralTokenAddress: string,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        getGuardian(overrides?: CallOverrides): Promise<[string] & { guardian: string }>

        getPoolUtilization(overrides?: CallOverrides): Promise<[BigNumber]>

        initialPrice(overrides?: CallOverrides): Promise<[BigNumber]>

        initializeDomainSeparator(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        loanParamsIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>

        loanTokenAddress(overrides?: CallOverrides): Promise<[string]>

        marginTrade(
            loanId: BytesLike,
            leverageAmount: BigNumberish,
            loanTokenSent: BigNumberish,
            collateralTokenSent: BigNumberish,
            collateralTokenAddress: string,
            trader: string,
            loanDataBytes: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        mint(
            receiver: string,
            depositAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        mintWithEther(
            receiver: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        name(overrides?: CallOverrides): Promise<[string]>

        nextBorrowInterestRate(borrowAmount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

        nextSupplyInterestRate(supplyAmount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

        nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

        owner(overrides?: CallOverrides): Promise<[string]>

        permit(
            owner: string,
            spender: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        profitOf(user: string, overrides?: CallOverrides): Promise<[BigNumber]>

        revokeApproval(
            _loanTokenAddress: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        setDemandCurve(
            _rateHelper: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        setTarget(
            _newTarget: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        supplyInterestRate(overrides?: CallOverrides): Promise<[BigNumber]>

        symbol(overrides?: CallOverrides): Promise<[string]>

        toggleFunctionPause(
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        toggleFunctionUnPause(
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        tokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>

        totalAssetBorrow(overrides?: CallOverrides): Promise<[BigNumber]>

        totalAssetSupply(overrides?: CallOverrides): Promise<[BigNumber]>

        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

        totalSupplyInterestRate(assetSupply: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

        transfer(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        updateFlashBorrowFeePercent(
            newFeePercent: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        updateSettings(
            settingsTarget: string,
            callData: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>
    }

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>

    _isPaused(sig: BytesLike, overrides?: CallOverrides): Promise<boolean>

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

    approve(
        spender: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    assetBalanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    borrow(
        loanId: BytesLike,
        withdrawAmount: BigNumberish,
        initialLoanDuration: BigNumberish,
        collateralTokenSent: BigNumberish,
        collateralTokenAddress: string,
        borrower: string,
        receiver: string,
        loanDataBytes: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    borrowInterestRate(overrides?: CallOverrides): Promise<BigNumber>

    burn(
        receiver: string,
        burnAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    burnToEther(
        receiver: string,
        burnAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    changeGuardian(
        newGuardian: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    checkpointPrice(_user: string, overrides?: CallOverrides): Promise<BigNumber>

    flashBorrow(
        borrowAmount: BigNumberish,
        borrower: string,
        target: string,
        signature: string,
        data: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getBorrowAmountForDeposit(
        depositAmount: BigNumberish,
        initialLoanDuration: BigNumberish,
        collateralTokenAddress: string,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    getDepositAmountForBorrow(
        borrowAmount: BigNumberish,
        initialLoanDuration: BigNumberish,
        collateralTokenAddress: string,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    getGuardian(overrides?: CallOverrides): Promise<string>

    getPoolUtilization(overrides?: CallOverrides): Promise<BigNumber>

    initialPrice(overrides?: CallOverrides): Promise<BigNumber>

    initializeDomainSeparator(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    loanParamsIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    loanTokenAddress(overrides?: CallOverrides): Promise<string>

    marginTrade(
        loanId: BytesLike,
        leverageAmount: BigNumberish,
        loanTokenSent: BigNumberish,
        collateralTokenSent: BigNumberish,
        collateralTokenAddress: string,
        trader: string,
        loanDataBytes: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    mint(
        receiver: string,
        depositAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    mintWithEther(
        receiver: string,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<string>

    nextBorrowInterestRate(borrowAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    nextSupplyInterestRate(supplyAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    permit(
        owner: string,
        spender: string,
        value: BigNumberish,
        deadline: BigNumberish,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    profitOf(user: string, overrides?: CallOverrides): Promise<BigNumber>

    revokeApproval(
        _loanTokenAddress: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setDemandCurve(
        _rateHelper: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setTarget(
        _newTarget: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    supplyInterestRate(overrides?: CallOverrides): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<string>

    toggleFunctionPause(
        sig: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    toggleFunctionUnPause(
        sig: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>

    totalAssetBorrow(overrides?: CallOverrides): Promise<BigNumber>

    totalAssetSupply(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    totalSupplyInterestRate(assetSupply: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    transfer(
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transferFrom(
        sender: string,
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateFlashBorrowFeePercent(
        newFeePercent: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateSettings(
        settingsTarget: string,
        callData: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>

        PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>

        _isPaused(sig: BytesLike, overrides?: CallOverrides): Promise<boolean>

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

        approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>

        assetBalanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>

        balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

        borrow(
            loanId: BytesLike,
            withdrawAmount: BigNumberish,
            initialLoanDuration: BigNumberish,
            collateralTokenSent: BigNumberish,
            collateralTokenAddress: string,
            borrower: string,
            receiver: string,
            loanDataBytes: BytesLike,
            overrides?: CallOverrides
        ): Promise<IToken.LoanOpenDataStructOutput>

        borrowInterestRate(overrides?: CallOverrides): Promise<BigNumber>

        burn(receiver: string, burnAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        burnToEther(receiver: string, burnAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        changeGuardian(newGuardian: string, overrides?: CallOverrides): Promise<void>

        checkpointPrice(_user: string, overrides?: CallOverrides): Promise<BigNumber>

        flashBorrow(
            borrowAmount: BigNumberish,
            borrower: string,
            target: string,
            signature: string,
            data: BytesLike,
            overrides?: CallOverrides
        ): Promise<string>

        getBorrowAmountForDeposit(
            depositAmount: BigNumberish,
            initialLoanDuration: BigNumberish,
            collateralTokenAddress: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getDepositAmountForBorrow(
            borrowAmount: BigNumberish,
            initialLoanDuration: BigNumberish,
            collateralTokenAddress: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getGuardian(overrides?: CallOverrides): Promise<string>

        getPoolUtilization(overrides?: CallOverrides): Promise<BigNumber>

        initialPrice(overrides?: CallOverrides): Promise<BigNumber>

        initializeDomainSeparator(overrides?: CallOverrides): Promise<void>

        loanParamsIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

        loanTokenAddress(overrides?: CallOverrides): Promise<string>

        marginTrade(
            loanId: BytesLike,
            leverageAmount: BigNumberish,
            loanTokenSent: BigNumberish,
            collateralTokenSent: BigNumberish,
            collateralTokenAddress: string,
            trader: string,
            loanDataBytes: BytesLike,
            overrides?: CallOverrides
        ): Promise<IToken.LoanOpenDataStructOutput>

        mint(receiver: string, depositAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        mintWithEther(receiver: string, overrides?: CallOverrides): Promise<void>

        name(overrides?: CallOverrides): Promise<string>

        nextBorrowInterestRate(borrowAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        nextSupplyInterestRate(supplyAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<string>

        permit(
            owner: string,
            spender: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>

        profitOf(user: string, overrides?: CallOverrides): Promise<BigNumber>

        revokeApproval(_loanTokenAddress: string, overrides?: CallOverrides): Promise<void>

        setDemandCurve(_rateHelper: string, overrides?: CallOverrides): Promise<void>

        setTarget(_newTarget: string, overrides?: CallOverrides): Promise<void>

        supplyInterestRate(overrides?: CallOverrides): Promise<BigNumber>

        symbol(overrides?: CallOverrides): Promise<string>

        toggleFunctionPause(sig: BytesLike, overrides?: CallOverrides): Promise<void>

        toggleFunctionUnPause(sig: BytesLike, overrides?: CallOverrides): Promise<void>

        tokenPrice(overrides?: CallOverrides): Promise<BigNumber>

        totalAssetBorrow(overrides?: CallOverrides): Promise<BigNumber>

        totalAssetSupply(overrides?: CallOverrides): Promise<BigNumber>

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>

        totalSupplyInterestRate(assetSupply: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>

        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

        updateFlashBorrowFeePercent(newFeePercent: BigNumberish, overrides?: CallOverrides): Promise<void>

        updateSettings(settingsTarget: string, callData: BytesLike, overrides?: CallOverrides): Promise<void>
    }

    filters: {
        'Approval(address,address,uint256)'(
            owner?: string | null,
            spender?: string | null,
            value?: null
        ): ApprovalEventFilter
        Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter

        'Burn(address,uint256,uint256,uint256)'(
            burner?: string | null,
            tokenAmount?: null,
            assetAmount?: null,
            price?: null
        ): BurnEventFilter
        Burn(burner?: string | null, tokenAmount?: null, assetAmount?: null, price?: null): BurnEventFilter

        'FlashBorrow(address,address,address,uint256)'(
            borrower?: null,
            target?: null,
            loanToken?: null,
            loanAmount?: null
        ): FlashBorrowEventFilter
        FlashBorrow(borrower?: null, target?: null, loanToken?: null, loanAmount?: null): FlashBorrowEventFilter

        'Mint(address,uint256,uint256,uint256)'(
            minter?: string | null,
            tokenAmount?: null,
            assetAmount?: null,
            price?: null
        ): MintEventFilter
        Mint(minter?: string | null, tokenAmount?: null, assetAmount?: null, price?: null): MintEventFilter

        'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter
        Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter
    }

    estimateGas: {
        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>

        PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>

        _isPaused(sig: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        assetBalanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>

        balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

        borrow(
            loanId: BytesLike,
            withdrawAmount: BigNumberish,
            initialLoanDuration: BigNumberish,
            collateralTokenSent: BigNumberish,
            collateralTokenAddress: string,
            borrower: string,
            receiver: string,
            loanDataBytes: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        borrowInterestRate(overrides?: CallOverrides): Promise<BigNumber>

        burn(
            receiver: string,
            burnAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        burnToEther(
            receiver: string,
            burnAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        changeGuardian(
            newGuardian: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        checkpointPrice(_user: string, overrides?: CallOverrides): Promise<BigNumber>

        flashBorrow(
            borrowAmount: BigNumberish,
            borrower: string,
            target: string,
            signature: string,
            data: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        getBorrowAmountForDeposit(
            depositAmount: BigNumberish,
            initialLoanDuration: BigNumberish,
            collateralTokenAddress: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getDepositAmountForBorrow(
            borrowAmount: BigNumberish,
            initialLoanDuration: BigNumberish,
            collateralTokenAddress: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getGuardian(overrides?: CallOverrides): Promise<BigNumber>

        getPoolUtilization(overrides?: CallOverrides): Promise<BigNumber>

        initialPrice(overrides?: CallOverrides): Promise<BigNumber>

        initializeDomainSeparator(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        loanParamsIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        loanTokenAddress(overrides?: CallOverrides): Promise<BigNumber>

        marginTrade(
            loanId: BytesLike,
            leverageAmount: BigNumberish,
            loanTokenSent: BigNumberish,
            collateralTokenSent: BigNumberish,
            collateralTokenAddress: string,
            trader: string,
            loanDataBytes: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        mint(
            receiver: string,
            depositAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        mintWithEther(
            receiver: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        name(overrides?: CallOverrides): Promise<BigNumber>

        nextBorrowInterestRate(borrowAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        nextSupplyInterestRate(supplyAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        permit(
            owner: string,
            spender: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        profitOf(user: string, overrides?: CallOverrides): Promise<BigNumber>

        revokeApproval(
            _loanTokenAddress: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        setDemandCurve(
            _rateHelper: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        setTarget(_newTarget: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

        supplyInterestRate(overrides?: CallOverrides): Promise<BigNumber>

        symbol(overrides?: CallOverrides): Promise<BigNumber>

        toggleFunctionPause(
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        toggleFunctionUnPause(
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        tokenPrice(overrides?: CallOverrides): Promise<BigNumber>

        totalAssetBorrow(overrides?: CallOverrides): Promise<BigNumber>

        totalAssetSupply(overrides?: CallOverrides): Promise<BigNumber>

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>

        totalSupplyInterestRate(assetSupply: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        transfer(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        updateFlashBorrowFeePercent(
            newFeePercent: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        updateSettings(
            settingsTarget: string,
            callData: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>

        PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>

        _isPaused(sig: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

        allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        approve(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        assetBalanceOf(_owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        borrow(
            loanId: BytesLike,
            withdrawAmount: BigNumberish,
            initialLoanDuration: BigNumberish,
            collateralTokenSent: BigNumberish,
            collateralTokenAddress: string,
            borrower: string,
            receiver: string,
            loanDataBytes: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        borrowInterestRate(overrides?: CallOverrides): Promise<PopulatedTransaction>

        burn(
            receiver: string,
            burnAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        burnToEther(
            receiver: string,
            burnAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        changeGuardian(
            newGuardian: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        checkpointPrice(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        flashBorrow(
            borrowAmount: BigNumberish,
            borrower: string,
            target: string,
            signature: string,
            data: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        getBorrowAmountForDeposit(
            depositAmount: BigNumberish,
            initialLoanDuration: BigNumberish,
            collateralTokenAddress: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getDepositAmountForBorrow(
            borrowAmount: BigNumberish,
            initialLoanDuration: BigNumberish,
            collateralTokenAddress: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getPoolUtilization(overrides?: CallOverrides): Promise<PopulatedTransaction>

        initialPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

        initializeDomainSeparator(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        loanParamsIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

        loanTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>

        marginTrade(
            loanId: BytesLike,
            leverageAmount: BigNumberish,
            loanTokenSent: BigNumberish,
            collateralTokenSent: BigNumberish,
            collateralTokenAddress: string,
            trader: string,
            loanDataBytes: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        mint(
            receiver: string,
            depositAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        mintWithEther(
            receiver: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        name(overrides?: CallOverrides): Promise<PopulatedTransaction>

        nextBorrowInterestRate(borrowAmount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

        nextSupplyInterestRate(supplyAmount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

        nonces(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        permit(
            owner: string,
            spender: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        profitOf(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

        revokeApproval(
            _loanTokenAddress: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        setDemandCurve(
            _rateHelper: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        setTarget(
            _newTarget: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        supplyInterestRate(overrides?: CallOverrides): Promise<PopulatedTransaction>

        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

        toggleFunctionPause(
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        toggleFunctionUnPause(
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        tokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

        totalAssetBorrow(overrides?: CallOverrides): Promise<PopulatedTransaction>

        totalAssetSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

        totalSupplyInterestRate(assetSupply: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

        transfer(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        transferFrom(
            sender: string,
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        updateFlashBorrowFeePercent(
            newFeePercent: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        updateSettings(
            settingsTarget: string,
            callData: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>
    }
}
