/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import type { MetaRouterV2, MetaRouterV2Interface } from '../MetaRouterV2'

const _abi = [
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'uint256',
                        name: 'stableBridgingFee',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'amount',
                        type: 'uint256',
                    },
                    {
                        internalType: 'bytes32',
                        name: 'externalID',
                        type: 'bytes32',
                    },
                    {
                        internalType: 'address',
                        name: 'tokenReal',
                        type: 'address',
                    },
                    {
                        internalType: 'uint256',
                        name: 'chainID',
                        type: 'uint256',
                    },
                    {
                        internalType: 'address',
                        name: 'to',
                        type: 'address',
                    },
                    {
                        internalType: 'address[]',
                        name: 'swapTokens',
                        type: 'address[]',
                    },
                    {
                        internalType: 'address',
                        name: 'secondDexRouter',
                        type: 'address',
                    },
                    {
                        internalType: 'bytes',
                        name: 'secondSwapCalldata',
                        type: 'bytes',
                    },
                    {
                        internalType: 'address',
                        name: 'finalDexRouter',
                        type: 'address',
                    },
                    {
                        internalType: 'bytes',
                        name: 'finalSwapCalldata',
                        type: 'bytes',
                    },
                ],
                internalType: 'struct MetaRouteStructs.MetaMintTransaction',
                name: '_metaMintTransaction',
                type: 'tuple',
            },
        ],
        name: 'metaMintSwap',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'bytes',
                        name: 'firstSwapCalldata',
                        type: 'bytes',
                    },
                    {
                        internalType: 'bytes',
                        name: 'secondSwapCalldata',
                        type: 'bytes',
                    },
                    {
                        internalType: 'address[]',
                        name: 'approvedTokens',
                        type: 'address[]',
                    },
                    {
                        internalType: 'address',
                        name: 'firstDexRouter',
                        type: 'address',
                    },
                    {
                        internalType: 'address',
                        name: 'secondDexRouter',
                        type: 'address',
                    },
                    {
                        internalType: 'uint256',
                        name: 'amount',
                        type: 'uint256',
                    },
                    {
                        internalType: 'bool',
                        name: 'nativeIn',
                        type: 'bool',
                    },
                    {
                        internalType: 'address',
                        name: 'relayRecipient',
                        type: 'address',
                    },
                    {
                        internalType: 'bytes',
                        name: 'otherSideCalldata',
                        type: 'bytes',
                    },
                ],
                internalType: 'struct MetaRouteStructs.MetaRouteTransactionV2',
                name: '_metarouteTransaction',
                type: 'tuple',
            },
        ],
        name: 'metaRouteV2',
        outputs: [],
        stateMutability: 'payable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_token',
                type: 'address',
            },
            {
                internalType: 'uint256',
                name: '_amount',
                type: 'uint256',
            },
            {
                internalType: 'address',
                name: '_router',
                type: 'address',
            },
            {
                internalType: 'bytes',
                name: '_swapCalldata',
                type: 'bytes',
            },
        ],
        name: 'swap',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
]

const _bytecode =
    '0x608060405234801561001057600080fd5b50611406806100206000396000f3fe6080604052600436106100345760003560e01c80635ae904e0146100395780637f0f41d71461004e578063d0f874d81461006e575b600080fd5b61004c61004736600461121a565b61008e565b005b34801561005a57600080fd5b5061004c610069366004611109565b61087f565b34801561007a57600080fd5b5061004c6100893660046111de565b610920565b600061009d60408301836112ba565b91506100b1905060e0830160c084016111a4565b6100f7576100f76100c560408401846112ba565b60008181106100d6576100d6611390565b90506020020160208101906100eb91906110e7565b33308560a00135610c21565b60a0820135610106838061130b565b15905061038b5761011d60e0840160c085016111a4565b61020f5761012e60408401846112ba565b600081811061013f5761013f611390565b905060200201602081019061015491906110e7565b6001600160a01b031663095ea7b361017260808601606087016110e7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260a08601356024820152604401602060405180830381600087803b1580156101d557600080fd5b505af11580156101e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020d91906111c1565b505b600061022160808501606086016110e7565b6001600160a01b031634610235868061130b565b60405161024392919061126f565b60006040518083038185875af1925050503d8060008114610280576040519150601f19603f3d011682016040523d82523d6000602084013e610285565b606091505b50509050806102db5760405162461bcd60e51b815260206004820152601f60248201527f4d657461526f7574657256323a2066697273742073776170206661696c65640060448201526064015b60405180910390fd5b6102e860408501856112ba565b60018181106102f9576102f9611390565b905060200201602081019061030e91906110e7565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561034f57600080fd5b505afa158015610363573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103879190611256565b9150505b80610399602085018561130b565b1590506106555760006103af602086018661130b565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506064810184905290506103f960408601866112ba565b610404600287611352565b81811061041357610413611390565b905060200201602081019061042891906110e7565b6001600160a01b031663095ea7b361044660a08801608089016110e7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260248101869052604401602060405180830381600087803b1580156104a657600080fd5b505af11580156104ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104de91906111c1565b5060006104f160a08701608088016110e7565b6001600160a01b031682604051610508919061127f565b6000604051808303816000865af19150503d8060008114610545576040519150601f19603f3d011682016040523d82523d6000602084013e61054a565b606091505b505090508061059b5760405162461bcd60e51b815260206004820181905260248201527f4d657461526f7574657256323a207365636f6e642073776170206661696c656460448201526064016102d2565b6105a860408701876112ba565b6105b3600188611352565b8181106105c2576105c2611390565b90506020020160208101906105d791906110e7565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561061857600080fd5b505afa15801561062c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106509190611256565b925050505b61066260408501856112ba565b61066d600186611352565b81811061067c5761067c611390565b905060200201602081019061069191906110e7565b6001600160a01b031663095ea7b36106b0610100870160e088016110e7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b15801561071057600080fd5b505af1158015610724573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074891906111c1565b50600061075961010086018661130b565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250606485018790529394506107a892505050610100870160e088016110e7565b6001600160a01b0316826040516107bf919061127f565b6000604051808303816000865af19150503d80600081146107fc576040519150601f19603f3d011682016040523d82523d6000602084013e610801565b606091505b50509050806108775760405162461bcd60e51b8152602060048201526024808201527f4d657461526f7574657256323a206f7468657220736964652063616c6c20666160448201527f696c65640000000000000000000000000000000000000000000000000000000060648201526084016102d2565b505050505050565b60006108c686868686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060249250610d91915050565b9050806108775760405162461bcd60e51b815260206004820152602260248201527f4d657461526f7574657256323a2065787465726e616c2073776170206661696c604482015261195960f21b60648201526084016102d2565b60006109b961093260c08401846112ba565b600081811061094357610943611390565b905060200201602081019061095891906110e7565b602084013561096e610100860160e087016110e7565b61097c61010087018761130b565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060649250610d91915050565b905080610a135760405162461bcd60e51b815260206004820152602260248201527f4d657461526f7574657256323a20696e7465726e616c2073776170206661696c604482015261195960f21b60648201526084016102d2565b6000610a2260c08401846112ba565b6001818110610a3357610a33611390565b9050602002016020810190610a4891906110e7565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610a8957600080fd5b505afa158015610a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac19190611256565b9050610ad060c08401846112ba565b905060021415610b2b57610b26610aea60c08501856112ba565b6001818110610afb57610afb611390565b9050602002016020810190610b1091906110e7565b610b2060c0860160a087016110e7565b83610f5c565b505050565b6000610bc1610b3d60c08601866112ba565b6001818110610b4e57610b4e611390565b9050602002016020810190610b6391906110e7565b83610b76610140880161012089016110e7565b610b8461014089018961130b565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060249250610d91915050565b905080610c1b5760405162461bcd60e51b815260206004820152602260248201527f4d657461526f7574657256323a2065787465726e616c2073776170206661696c604482015261195960f21b60648201526084016102d2565b50505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790529151600092839290881691610cb3919061127f565b6000604051808303816000865af19150503d8060008114610cf0576040519150601f19603f3d011682016040523d82523d6000602084013e610cf5565b606091505b5091509150818015610d1f575080511580610d1f575080806020019051810190610d1f91906111c1565b6108775760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c656400000000000000000000000000000060648201526084016102d2565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038481166024830152600091869188169063dd62ed3e9060440160206040518083038186803b158015610df657600080fd5b505afa158015610e0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2e9190611256565b1015610ef0576040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602483015287169063095ea7b390604401602060405180830381600087803b158015610eb657600080fd5b505af1158015610eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eee91906111c1565b505b8482840152836001600160a01b031683604051610f0d919061127f565b6000604051808303816000865af19150503d8060008114610f4a576040519150601f19603f3d011682016040523d82523d6000602084013e610f4f565b606091505b5090979650505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691610fe6919061127f565b6000604051808303816000865af19150503d8060008114611023576040519150601f19603f3d011682016040523d82523d6000602084013e611028565b606091505b509150915081801561105257508051158061105257508080602001905181019061105291906111c1565b6110c45760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c65640000000000000000000000000000000000000060648201526084016102d2565b5050505050565b80356001600160a01b03811681146110e257600080fd5b919050565b6000602082840312156110f957600080fd5b611102826110cb565b9392505050565b60008060008060006080868803121561112157600080fd5b61112a866110cb565b94506020860135935061113f604087016110cb565b9250606086013567ffffffffffffffff8082111561115c57600080fd5b818801915088601f83011261117057600080fd5b81358181111561117f57600080fd5b89602082850101111561119157600080fd5b9699959850939650602001949392505050565b6000602082840312156111b657600080fd5b8135611102816113bf565b6000602082840312156111d357600080fd5b8151611102816113bf565b6000602082840312156111f057600080fd5b813567ffffffffffffffff81111561120757600080fd5b8201610160818503121561110257600080fd5b60006020828403121561122c57600080fd5b813567ffffffffffffffff81111561124357600080fd5b8201610120818503121561110257600080fd5b60006020828403121561126857600080fd5b5051919050565b8183823760009101908152919050565b6000825160005b818110156112a05760208186018101518583015201611286565b818111156112af576000828501525b509190910192915050565b6000808335601e198436030181126112d157600080fd5b83018035915067ffffffffffffffff8211156112ec57600080fd5b6020019150600581901b360382131561130457600080fd5b9250929050565b6000808335601e1984360301811261132257600080fd5b83018035915067ffffffffffffffff82111561133d57600080fd5b60200191503681900382131561130457600080fd5b60008282101561138b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80151581146113cd57600080fd5b5056fea26469706673582212208f7e348f423a313662078dc590896533e160c56e5993478cff8f8e3b550caba864736f6c63430008070033'

type MetaRouterV2ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: MetaRouterV2ConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
    xs.length > 1

export class MetaRouterV2__factory extends ContractFactory {
    constructor(...args: MetaRouterV2ConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args)
        } else {
            super(_abi, _bytecode, args[0])
        }
        this.contractName = 'MetaRouterV2'
    }

    deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<MetaRouterV2> {
        return super.deploy(overrides || {}) as Promise<MetaRouterV2>
    }
    getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
        return super.getDeployTransaction(overrides || {})
    }
    attach(address: string): MetaRouterV2 {
        return super.attach(address) as MetaRouterV2
    }
    connect(signer: Signer): MetaRouterV2__factory {
        return super.connect(signer) as MetaRouterV2__factory
    }
    static readonly contractName: 'MetaRouterV2'
    public readonly contractName: 'MetaRouterV2'
    static readonly bytecode = _bytecode
    static readonly abi = _abi
    static createInterface(): MetaRouterV2Interface {
        return new utils.Interface(_abi) as MetaRouterV2Interface
    }
    static connect(address: string, signerOrProvider: Signer | Provider): MetaRouterV2 {
        return new Contract(address, _abi, signerOrProvider) as MetaRouterV2
    }
}
